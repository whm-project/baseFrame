<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        ":/mybatis-generator-config_1_0.dtd" >

<generatorConfiguration>
    <properties resource="jdbc.properties"/>
    <context id="context" targetRuntime="MyBatis3Simple" defaultModelType="flat">
        <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <plugin type="tk.mybatis.mapper.generator.MapperPlugin">
            <property name="mappers" value="com.my.base.BaseDao"/>
            <property name="forceAnnotation" value="true"/>
        </plugin>

        <!--插件：为生成的Java model添加序列化接口，并生成serialVersionUID字段-->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <!--插件：为生成的Java model创建一个toString方法-->
        <!--<plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>-->
        <!--lombok插件-->
        <plugin type="org.mybatis.generator.plugins.LombokPlugin" />

        <!-- optional，旨在创建class时，对注释进行控制 -->
        <commentGenerator>
            <!-- 阻止生成注释 -->
            <property name="suppressAllComments" value="true" />
            <!-- 阻止生成的注释包含时间戳 -->
            <property name="suppressDate" value="true" />
        </commentGenerator>

        <jdbcConnection driverClass="${jdbc_driverClassName}"
                        connectionURL="${jdbc_url}"
                        userId="${jdbc_username}"
                        password="${jdbc_password}">
        </jdbcConnection>


        <!-- 这个元素的配置用来指定JDBC类型和Java类型如何转换 -->
        <javaTypeResolver>
            <!-- 可以配置的属性为forceBigDecimals，该属性可以控制是否强制DECIMAL和NUMERIC类型的字段转换为Java类型的java.math.BigDecimal,默认值为false，一般不需要配置。
                  默认情况下的转换规则为：
                    如果精度>0或者长度>18，就会使用java.math.BigDecimal
                    如果精度=0并且10<=长度<=18，就会使用java.lang.Long
                    如果精度=0并且5<=长度<=9，就会使用java.lang.Integer
                    如果精度=0并且长度<5，就会使用java.lang.Short
                    如果设置为true，那么一定会使用java.math.BigDecimal
            -->
            <property name="forceBigDecimals" value="false" />
        </javaTypeResolver>

        <!--==============================================================================-->
        <!-- java模型创建器，是必须要的元素 注：如果重新创建，则需删除model类文件，再用插件生成
                    负责：1，key类（见context的defaultModelType）；2，java类；3，查询类
                    targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；
                    targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录
                 -->
        <javaModelGenerator targetPackage="com.my.bussiness.model" targetProject="src/main/java"/>

        <!--==============================================================================-->

         <!--生成SQL map的XML文件生成器-->
        <sqlMapGenerator targetPackage="com.my.bussiness.mapper" targetProject="src/main/java"/>

        <!--==============================================================================-->
        <!--生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 -->
        <javaClientGenerator targetPackage="com.my.bussiness.dao" targetProject="src/main/java"  type="XMLMAPPER">
            <property name="enableSubPackages" value="true" />
            <!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查-->
            <property name="rootInterface" value=""/>
        </javaClientGenerator>

        <!--==============================================================================-->
        <!--生成querymodel-->
        <javaQueryModelGenerator targetPackage="com.my.bussiness.model.querymodel" targetProject="src/main/java">
            <property name="enableSubPackages" value="true" />
            <property name="queryRootClass" value="com.my.base.BaseQueryModel"/>
        </javaQueryModelGenerator>

        <!--==============================================================================-->
        <!-- java Controller创建器，是可选元素-->
        <javaControllerGenerator targetPackage="com.my.bussiness.controller" targetProject="src/main/java">
            <property name="enableSubPackages" value="true" />
        </javaControllerGenerator>

        <!--==============================================================================-->
        <!-- java Service与ServiceImpl创建器，是可选元素,配置ServiceImpl必须配置Service -->
        <javaServiceGenerator targetPackage="com.my.bussiness.service" targetProject="src/main/java">
            <property name="enableSubPackages" value="true" />
            <property name="rootClass" value="com.my.base.BaseService"/>
        </javaServiceGenerator>

        <javaSerivceImplGenerator targetPackage="com.my.bussiness.service.impl" targetProject="src/main/java">
            <property name="enableSubPackages" value="true" />
            <property name="rootClass" value="com.my.base.BaseServiceImpl"/>
        </javaSerivceImplGenerator>

        <!-- 要生成的表 -->
        <table tableName="sys_log" >
            <!-- generatedKey用于生成生成主键的方法，如果设置了该元素，MBG会在生成的<insert>元素中生成一条正确的<selectKey>元素，该元素可选
           column:主键的列名；
           sqlStatement：要生成的selectKey语句，有以下可选项：
               Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
               DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
               DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
               Derby     :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()
               HSQLDB    :相当于selectKey的SQL为：CALL IDENTITY()
               Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1
               MySql     :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()
               SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()
               SYBASE    :相当于selectKey的SQL为：SELECT @@IDENTITY
               JDBC      :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性
        -->
            <!--<generatedKey column="id" sqlStatement="SqlServer" />-->
        </table>
        <!--<table tableName="sys_menu" ></table>-->
        <!--<table tableName="sys_role" ></table>-->
        <!--<table tableName="sys_user" ></table>-->
        <!--<table tableName="sys_img" ></table>-->
        <!--<table tableName="sys_rolemenu" ></table>-->
        <!--<table tableName="sys_dictgroup" ></table>-->
        <!--<table tableName="sys_dictvalue" ></table>-->
        <!--<table tableName="sys_parameter" ></table>-->
        <!--<table tableName="sys_log">-->
        <!--<deletedStateColumn column="OPERATE_TYPE" value="1"></deletedStateColumn>-->
        <!--<deleteAffectedTable affectedTable="sys_log_config" sourceColumnAry="log_id OPERATE_TYPE" affectedColumnAry="log_id model_name"></deleteAffectedTable>-->
        <!--</table>-->
        <!--<table tableName="sys_log_config"></table>-->
    </context>
</generatorConfiguration>